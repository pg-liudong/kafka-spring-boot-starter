// 插件配置
plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'signing'
}

group 'org.dong.kafka'
version '1.0.1'

//jdk版本
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    api('org.springframework.kafka:spring-kafka:2.8.2')
    implementation(
            'org.springframework.boot:spring-boot-starter:2.6.3',
            'com.alibaba:fastjson:1.2.79',
            'cn.hutool:hutool-all:5.7.20',
            'org.apache.commons:commons-lang3:3.12.0',
            'com.google.guava:guava:31.0.1-jre'
    )
    annotationProcessor(
            "org.springframework.boot:spring-boot-configuration-processor:2.6.3",
            'org.projectlombok:lombok:1.18.22',
    )
    compileOnly('org.projectlombok:lombok:1.18.22')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.2')
}

// 编码方式
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    enabled = true
    archiveClassifier = ''
}

//对于典型的 Java 项目，您可以添加一个javadocJar以及一个 sourcesJar任务
// 后面的都是打包的配置
task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}
// 生成 javadoc jar
task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// javadoc 配置，这里是自定义了 java doc 的一些配置
javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    options.addStringOption('Xdoclint:none', '-quiet')

    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
    options.encoding = "UTF-8"  //编码一定要配置否则直接出错
    options.charSet = 'UTF-8'
}
// 并将它们与项目 jar 本身一起连接到 artifacts 集合中：
artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "io.github.pg-liudong"
            artifactId "$project.name"
            version "$version"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'kafka-spring-boot-starter'
                description = 'Encapsulation based on spring-kafka not only supports native configuration, but also adds multi data source configuration.'
                url = 'https://github.com/pg-liudong/kafka-spring-boot-starter'
                packaging 'jar'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'liudong'
                        name = 'liudong'
                        email = 'pg.liudong@qq.com'
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/pg-liudong/kafka-spring-boot-starter"
                    developerConnection = "scm:git:https://github.com/pg-liudong/kafka-spring-boot-starter.git"
                    url = "https://github.com/pg-liudong/kafka-spring-boot-starter.git"
                }
            }
        }
    }
    repositories {
        mavenLocal()
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = "${ossrhUsername}"
                password = "${ossrhPassword}"
            }
        }
    }
}
// 将构建的包签名
signing {
    sign configurations.archives
    sign publishing.publications.maven
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
